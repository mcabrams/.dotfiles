" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')


" -------------------------------
"  Language / Filetype Specific
" -------------------------------

Plug 'pangloss/vim-javascript'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'maxmellon/vim-jsx-pretty'

" -------------------------------
"  Buffer and File Navigation
" -------------------------------

Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'mhinz/vim-startify'
Plug 'junegunn/fzf.vim'

" -------------------------------
"  Git
" -------------------------------

Plug 'tpope/vim-fugitive'

" -------------------------------
"  Project wide search and replace
" -------------------------------

" http://stackoverflow.com/questions/5686206/search-replace-using-quickfix-list-in-vim
Plug 'henrik/vim-qargs'

" -------------------------------
"  Syntax Checking
" -------------------------------

Plug 'dense-analysis/ale'

" -------------------------------
"  Text Editing and Surrounding
" -------------------------------

Plug 'junegunn/vim-easy-align'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-abolish'
Plug 'jgdavey/vim-blockle'

" -------------------------------
"  Text Expansion
" -------------------------------

Plug 'SirVer/ultisnips'
Plug 'mattn/emmet-vim'
Plug 'mlaursen/vim-react-snippets'

" -------------------------------
"  UI
" -------------------------------

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" -------------------------------
"  Utility
" -------------------------------

Plug 'tpope/vim-repeat'


" Initialize plugin system
call plug#end()

" ==============================================================================
" Moving Around, Searching and Patterns
" ==============================================================================

set hlsearch         " highlight all matches for the last used search pattern
set incsearch        " highlight pattern matches as you type
set ignorecase       " ignore case when using a search pattern
set smartcase        " override 'ignorecase' when pattern has upper case
                       " character

" ==============================================================================
" Tags
" ==============================================================================

" ==============================================================================
" Displaying Text
" ==============================================================================

set number
set scrolloff=8         " start scrolling when we're 8 lines away from margins
set sidescrolloff=15    " minimal number of columns to keep left and right of the cursor
set sidescroll=1        " minimal number of columns to scroll horizontally
set linespace=2         " number of pixel lines to use between characters

" ==============================================================================
" Syntax, Highlighting and Spelling
" ==============================================================================

syntax on           " enable syntax and highlighting, must be before colorscheme
set cursorline      " highlight the screen line of the cursor
set colorcolumn=80  " highlight column at 80 characters
hi ColorColumn ctermbg=lightgrey guibg=lightgrey

" ==============================================================================
" Multiple Windows
" ==============================================================================

" ==============================================================================
" Multiple Tab Pages
" ==============================================================================

set laststatus=2      " always show status line
set tabpagemax=20     " prevent vim from opening more than 20 tabs

" ==============================================================================
" Terminal
" ==============================================================================

" ==============================================================================
" Using The Mouse
" ==============================================================================

" ==============================================================================
" GUI
" ==============================================================================

set guioptions-=e "remove tab pages
set guioptions-=r "remove right-hand-scrollbar
set guioptions-=L "remove left-hand-scrollbar
set guioptions-=T "remove toolbar

" ==============================================================================
" Printing
" ==============================================================================

" ==============================================================================
" Messages and Info
" ==============================================================================

" ==============================================================================
" Selecting Text
" ==============================================================================

" ==============================================================================
" Editing Text
" ==============================================================================

set undolevels=5000      "maximum number of changes that can be undone

" ==============================================================================
" Tabs and Indenting
" ==============================================================================

" Use two spaces for indentation
set tabstop=2      " number of spaces a <Tab> in the text stands for
set softtabstop=2  " if non-zero, number of spaces to insert for a <Tab>
set shiftwidth=2   " number of spaces used for each step of (auto)indent
set expandtab      " expand <Tab> to spaces in Insert mode
set autoindent     " automatically set the indent of a new line
set cindent        " do clever autoindenting

" ==============================================================================
" Folding
" ==============================================================================

" ==============================================================================
" Diff Mode
" ==============================================================================

" ==============================================================================
" Mapping
" ==============================================================================

" ==============================================================================
" Reading and Writing Files
" ==============================================================================

" ==============================================================================
" The Swap File
" ==============================================================================

" ==============================================================================
" Command Line Editing
" ==============================================================================

set wildmenu
set wildignore+=*/tmp/*,*.so,*.swp,*.swo,*.zip

" Python/django specific
set wildignore+=*staticfiles/*,*/htmlcov/*,*/node_modules/*,*/__pycache__/**
set wildignore+=*.pyc,*/.mypy_cache/*

" ==============================================================================
" Executing External Commands
" ==============================================================================

set history=1000 " how many command lines are remembered

" ==============================================================================
" Running Make and Jumping To Errors
" ==============================================================================

" ==============================================================================
" Language Specific
" ==============================================================================

" ==============================================================================
" Multi-Byte Characters
" ==============================================================================

" ==============================================================================
" Various
" ==============================================================================

" ==============================================================================
" Mappings
" ==============================================================================

" Remap leader key to ,
let mapleader = ","

" Going to next occurence of a search will center on the line it's found
map N Nzz
map n nzz

" Nohlsearch hotkeys
:nnoremap <CR> :nohlsearch<cr>

" Create Blank Newlines and stay in Normal mode
nnoremap <silent> zj o<Esc>
nnoremap <silent> zk O<Esc>

" Allow vimrc editing
nmap <leader>v :tabedit $MYVIMRC<CR>

" Source vimrc changes
nmap <leader>r :source $MYVIMRC<CR> :echo "Vimrc reloaded!"<CR>

"This allows for change paste motion cp{motion}
nmap <silent> cp :set opfunc=ChangePaste<CR>g@
function! ChangePaste(type, ...)
  silent exe "normal! `[v`]\"_c"
  silent exe "normal! p"
endfunction

"This shows space/tab/return characters
nmap <leader>lc :set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<<CR> :set list<CR>

" Vundle hotkey setup
nmap <leader>bi :BundleInstall<cr>
nmap <leader>bc :BundleClean<cr>
nmap <leader>bu :BundleUpdate<cr>

" Search and replace selected text shortkey
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>

" Search and replace selected text shortkey project wide (with qargs, should do Ggrep before)
vnoremap <C-r>! "hy:Ggrep <C-R>h \| Qargs \| argdo %s/<C-R>h//gc \| update<left><left><left><left><left><left><left><left><left><left><left><left>

" NERDTree mappings
map <leader>n :NERDTreeToggle<cr>
nmap <leader>f :NERDTreeFind<CR>

" Yank filepath to clipboard
nmap <leader>yf! :let @+ = expand("%:p")<CR>
nmap <leader>yff :let @+ = expand("%") . " - Line number:" . line(".")<CR>
nmap <leader>yf :let @+ = expand("%")<CR>

" This allows html tags to be escaped
nnoremap <Leader>he :'[,']call HtmlEscape()<CR>
vnoremap <Leader>he :call HtmlEscape()<CR>

function! HtmlEscape()
  silent s/&/\&amp;/eg
  silent s/</\&lt;/eg
  silent s/>/\&gt;/eg
endfunction

function! TabCloseRight(bang)
    let cur=tabpagenr()
    while cur < tabpagenr('$')
        exe 'tabclose' . a:bang . ' ' . (cur + 1)
    endwhile
endfunction

function! TabCloseLeft(bang)
    while tabpagenr() > 1
        exe 'tabclose' . a:bang . ' 1'
    endwhile
endfunction

command! -bang Tabcloseright call TabCloseRight('<bang>')
command! -bang Tabcloseleft call TabCloseLeft('<bang>')

" Go back to last active tab
let g:lasttab = 1
nmap <Leader>lt :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

" Ggrep in new tab
function! GgrepInNewTab(name)
  let linenum=getpos('.')[1]
  tabe %
  call cursor(linenum,0)
  exe "Ggrep" a:name
endfunction

" Ggrep in new vs
function! GgrepInNewV(name)
  let linenum=getpos('.')[1]
  vs %
  call cursor(linenum,0)
  exe "Ggrep" a:name
endfunction

" Ggrep in new sp
function! GgrepInNewS(name)
  let linenum=getpos('.')[1]
  sp %
  call cursor(linenum,0)
  exe "Ggrep" a:name
endfunction

" Django wrap with trans mappings
vnoremap <leader>wt S"vf"S%witrans 
vnoremap <leader>wbt S%f%a blocktrans%kb %}>>/blocktransf}lxf%ikb{lxi% endblocktrans >>

" Open taglist
nmap <Leader>tl :TlistToggle<CR>

" Better fold text function
fu! CustomFoldText()
    "get first non-blank line
    let fs = v:foldstart
    while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
    endwhile
    if fs > v:foldend
        let line = getline(v:foldstart)
    else
        let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
    endif

    let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
    let foldSize = 1 + v:foldend - v:foldstart
    let foldSizeStr = " " . foldSize . " lines "
    let foldLevelStr = repeat("+--", v:foldlevel)
    let lineCount = line("$")
    let foldPercentage = printf("[%.1f", (foldSize*1.0)/lineCount*100) . "%] "
    let expansionString = repeat(".", w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
    return line . expansionString . foldSizeStr . foldPercentage . foldLevelStr
endf

" Use better fold text
set foldtext=CustomFoldText()

" Swap buffers between windows (http://stackoverflow.com/questions/2586984/how-can-i-swap-positions-of-two-open-files-in-splits-in-vim)
function! MarkWindowSwap()
    let g:markedWinNum = winnr()
endfunction

function! DoWindowSwap()
    "Mark destination
    let curNum = winnr()
    let curBuf = bufnr( "%" )
    exe g:markedWinNum . "wincmd w"
    "Switch to source and shuffle dest->source
    let markedBuf = bufnr( "%" )
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' curBuf
    "Switch to dest and shuffle source->dest
    exe curNum . "wincmd w"
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' markedBuf
endfunction

" Map swap commands
nmap <silent> <leader>mw :call MarkWindowSwap()<CR>
nmap <silent> <leader>pw :call DoWindowSwap()<CR>

vnoremap <Leader>gg "jy:Ggrep "<C-R>j"<CR>
nmap <Leader>gg "jyw:Ggrep "<C-R>j"<CR>
vnoremap <Leader>ggt "jy:GgrepInNewTab "<C-R>j"<CR>
nmap <Leader>ggt "jyw:GgrepInNewTab "<C-R>j"<CR>
vnoremap <Leader>ggv "jy:GgrepInNewV "<C-R>j"<CR>
nmap <Leader>ggv "jyw:GgrepInNewV "<C-R>j"<CR>
vnoremap <Leader>ggs "jy:GgrepInNewS "<C-R>j"<CR>
nmap <Leader>ggs "jyw:GgrepInNewS "<C-R>j"<CR>

command! -nargs=1 GgrepInNewTab call GgrepInNewTab(<f-args>)
command! -nargs=1 GgrepInNewS call GgrepInNewS(<f-args>)
command! -nargs=1 GgrepInNewV call GgrepInNewV(<f-args>)

" Map test commands
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

" Delete surrounding function
nmap <silent> dsf ds)db

" ==============================================================================
" Colors
" ==============================================================================

" ==============================================================================
" Swap Files
" ==============================================================================

set directory=~/.vim/swap,.
set backupdir=~/.vim/swap,.
set backupcopy=yes

" ==============================================================================
" Autocommands
" ==============================================================================

" Interested why these are structured this way? Read: http://learnvimscriptthehardway.stevelosh.com/chapters/14.html

augroup vim_enter
  autocmd!

  " Get startify and nerdtree working on startup
  autocmd VimEnter *
        \   if !argc()
        \ |   Startify
        \ |   NERDTree
        \ |   wincmd w
        \ | endif
augroup END

augroup filetype_startify
  autocmd!
  autocmd FileType startify setlocal buftype= "Avoid opening in NERDTree and creating a split
augroup END

augroup filetype_scss
  autocmd!
  autocmd FileType scss setlocal iskeyword+=-
augroup END

augroup filetype_html
  autocmd!
  autocmd FileType html setlocal iskeyword+=-
augroup END

augroup vim_fugitive
  autocmd!
  autocmd QuickFixCmdPost *grep* cwindow
augroup END

augroup git_commit
  autocmd!
  autocmd Filetype gitcommit setlocal spell textwidth=72
augroup END

augroup filetypedetect
    au BufRead,BufNewFile *.d.ts set filetype=typescript
augroup END

au BufRead,BufNewFile *.json set filetype=json
